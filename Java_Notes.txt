> Software is collection various programs.
  Types of Software :

  > System Software : 
     - This software used to develope functions of hardware devices.
     - Prog. Lang -> Assembly Lang., C Lang.

  > Application Software : 
    - This s/w is used to develop organization oriented application or to solve specific use cases.
    
    -> Standalone Application        
    -> Distributed Application
  
  Internet/Web Software
    -> This s/w is used to develope organization oriented problems in a distributed manner.

History Of Java :
    - Team in Sun Microsystem started working on Java language dev. to solve the consumer devices problems.
    - Java development has started in 1990
    - James Gosling(Founder/Father Of Java) lead this Java Devlopment team.
    - Initially Java named as OAK Language.
    - In 1995 they have renames to Java.
    - When Java initially released they have released in three flavours.
           - J2SE(Java 2 Standard Edition)
             - It is used mainly for devloping Standalone application.

           - J2EE(Java 2 Enterprise Edition)
             - It is mainly used for devloping Web Based application.

           - J2ME(Java 2 Micro/Mobile Edition)
             - It is mainly used for devloping Mobile OS and it's related application
Tech Version       s/w version                Performance Comparison
====================================================================
Java              JDK 1.0 & JDK 1.1           Tortoise
Java 2            JDK 1.2                     Dog 
                  JDK 1.3 & JDK 1.4           Horse
Java 5            JDK 1.5                     Tiger
                  JDK 1.6                     Mustang

* Features of Java :- 
          1. Simple
          2. Platform Independent
          3. Architectural Neutral
          4. Portable
          5. Multithreaded
          6. Networked
          7. Distributed
          8. High Performance
          9. Robust
          10. Dynamic
          11. Interpreted
          12. Secured
          13. OOPL 

  1. Simple :-
        Java is one of the simple programming language because of the following points.
              - Java programming doesn't support a complex concept called pointers.
              - Java introduced concept of byte code.

              Q. Define bytecode & JVM?
                ByteCode : ByteCode is the set of optimised instructions generated during compilation phase & it is more powerful than ordinary pointer code.
                JVM : JVM is set of programs developed by Sun Microsytems & supplied as a part of jdk for reading line by line of byte code & convert into native understanding form of OS.

                * Java language is one of the compiled & interpreted programming language.
              
              - Memory Allocation:
                   Java programming execution environment contain inbuilt garbage collection program for automatic memory management for strenghning the performance of Java/J2EE applications.
              
              Q. Define Garbage Collector.
              => Garbage Collector is one of the background system java program which is running internally along with our regular Java program for collecting unused/unreferenced memory space for improving the performance of our applications.

                 
  2. Platform Independent :-
     A platform independent technology/language related applications run on every OS, without considering their vendors.
     In order to say particular language is platform independent if and only if it has to satisfy the following properties.
       - The language must have data types & they must take same amount of memory space.
       - The language must contain some special internal programs which will convert from one format of one OS to another format of another OS.
     The languages like c, c++ are treated as platform dependent whereas Java language is treated as platform independent language.
      
      - 1 byte = 8 bits
      

  3. Architectural Neutral :
     An application is said to be architectural neutral if and only if the application runs on every processor without considering their architectures and vendors(providors).
     A language is said to be architectural neutral, it has to satisfy the following property.
     - The s/w must have the special internal programs which will convert the factors of one processor to factors of another processor.
     - The language like Java is one of the architectural neutral language because it satisfies the above property.
     - The basic aim of Sun microsystem is that Java applications must run without considering about software benchmarks and hardware benchmarks.

  4. Portable : 
     A portable is one which will run on every operating system and one every processor without considering their vendors and architectures.
     Tha applications of c, c++, pascal etc. are treated as non portable applications.
     All the Java applications are treated as portable applications.

     According to Sun Microsystem :

          Portability = Platform Independent + Architectural Neutral
  
  5. Multithreaded :
      Performing multiple tasks at a time is know as multitasking.
      Multitasking happen on Process or in the system program.

      - Multithreading is one of the distinct facility of Java programming.
      - The basic aim of multithreading is that to achieve concurrent execution.
      - A flow of control is know as thread. 
      - A basic use of thread is to excute user/programmer defined functions.
      - Java Program :
          Foreground/Child thread
          Background/Parent thread
      - Multitasking is one of the specialized form of OS.
      In java programming multithreading applications are developed by following :
         1. java.lang.Thread (Class)
         2. java.lang.Runnable (Interface)
      - A foreground thread is one which always executes logic of the java program or user/programmer defined methods of Java.
      - A Background thread is one which always monitors executor status of the forground threads.\
  
  6. Networked :
     The basic aim of networking is to share the data between multiple machines which are located either in the same network (local sharing) or in different network(global sharing).
     Collection of interconnected autonoumous/non autonoumous computers with the server is know as networking.
     According to industry standards two types of networks are there :
       -  Untrusted Network
            An untrusted network is one in which their exists collection of interconnected non automnoumous computers with the server.
      -  Trusted Network
          Trusted network is one in which there exist collection of interconnected automnoumous computers with the servers.
          
  7. Distributed : 
      According to the industry standards, in Java realtime applications.
      Applications are classifieds into two types they are :
         1. Centralized Applications
         2. Distributed Applications

      Java has it's own package for deveoping networking related applications i.e java.net.*;

    Q. What is the difference between URL(Uniform Resource Locater) & URI (Uniform Resource Identifier).
      - The place or address where the application is running is known as URL.
      - The place/address where the application is residing is know as URI.
  
  8. High Performance :
      Java is one of the high perfromance programming language because of the following reasons.
      - Because of magic of bytecode 
      - Because of magic of garbage collector, automatic memory management is taken care.
      - Java programming is free from pointers.
  
  9. Robust : 
     - Java is known as Robust as it is capable of handling run-time errors, supports automatic garbage collection & exception handling & memory management.
       Below class & interface is used for the exception handling.
        - java.lang.Exception (Class)
        - java.lang.Throwable (Interface)
     - Due to runtime exception handling java program doesn't terminate in between the execution. If any exception occurs at runtime it will handled and the program execution continued.

  10. Dynamic :
      - In most of the programming language, memory allocation technicques are divided into two types they are :
            1. Static Memory Allocation :
              - A static memory allocation is one in which the mermory will be allocated at compile time.
              - The limitations of static memory allocations are:
                 1. Waste of memory space.
                 2. loss of data 
                 3. Overlapping of existing data.

            2. Dynamic Memory Allocation
              - A Dynamic memory allocation is one in which the memory will allocated at runtime time on need basis.
              - Dynamic memory allocation overcomes the limitation of static memory allocatino.
              - In java for allocating memory dynamically we use operator called "new".
  
  11. Interpreted :
      In older versions of Java compilation phase is so faster than interpretation phase.
      Industry has complained to the Sun Microsystem saying that compilation phase is very faster and interpretation phase is very slow.
      To solve this issue sun microsystem has developed a program called JIT(Just In Time Compiler) and added as part of JVM to speed up the interpreation phase.
      In the current version of Java interpretation phase is so faster than compilation phase.
      Hence Java is one of the highly interpreted programming language.
  
    :\> javac App.java                        --> javac is Java compiler
      -> above step will generate App.class
    :\> java App              ---> java is Java interpreter

    Q. Define JIT.
    -> JIT is set of programs developed by Sun Microsystem and added as feature to JVM to speed up the interpretation phase by reading the entire section of the bytecode and converting it to native understanding for of OS.

  12. Secured :
        - No Explicit Pointer
        - Java programs run inside a virtual machine. (JVM)
        - Classloader
           Classloader in Java is a part of the Java Runtime Environment(JRE) which is used to load Java Classes into the Java Virtual Machine(JVM) dynamically. It adds security by separating the package for the class of the local file system from those that are imported from network sources.
        - Byte Code Verifier : 
             It checks the code fragments for illegal code that can violate access rights to objects.
        - Security Manager : 
            It determines what resources a class can access such as reading and writing to the local disk.
  
  13. OOPL (Object Oriented Programming language) :-
      
      1. Procedure Oriented prog. Lang. 
          e.g. c, pascal, cobol, ada 
      
      2. Object Oriented Prog. Lang
         e.g. Small Talk, Lisp, Object Pascal, Object COBOL, C++, Java, .Network
           C++ is partial object oriented. 
            - Every C++ program can be written like c prog.
            - 50% of OOPS principles not satisfied.
            - Friend Function
            

      * Fundamental Datatypes in Java :
        In Java programming we have 8 fundamental datatypes which are categorised into 4 categories or groups they are:
         
           1. Integer Category Datatypes
           2. Float
           3. Character
           4. Boolean

        1. Integer Category Datatype:
            This category datatypes are used for storing integer data in the main memory of the computer by allocating sufficient amount of memory space.
            In other words this category datatypes are used for representing whole numbers in the memory fo the computer.
            Integer category datatypes are divided into 4 types:
            
            S.no      Datatype      Size        Range   
          ======================================================  
            1.        byte           1 byte     -128 to +127
            2.        short          2 byte     -32,768 to +32,767
            3.        int            4 byte     -2,147,483,648 to +2,147,483,647
            4.        long           8 byte     -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807
        
        2. Float Category Datatype:
           A float data or real data is one which is represented in the form of scale , precision.

            e.g.  xxx.yyy
            here xxx is called scale yyy is called precision.

          In order to represent float data or real data in the main memory of the computer we use the float category data types.
          Float category data types are divided into 2 types 

          Sno.        Data Type       Size      Range     No. Of Dec places
        =====================================================================
          1.          float           4 byte                  6
          2.          double          8 byte                  14
               
        3. Character Category Datatype :
           - The range of char datatype is 0 to 65535.
           - The default value is '\u0000' and that is the lowest range of Unicode.
           - The default size(as mentioned above) 2 bytes because Java uses the Unicode system and not the ASCII code system.
           e.g. char a = 'A';
                char a;

        4. Boolean Category Datatype : 
           - Boolean Category Datatypes is used for representing or storing logical values i.e. true or false.
           - In Java programming to represent boolean values or logical values we use a datatype called "boolean".
           - boolean datatypes takes zero byte of main memory space becuase boolean datatype of java implemented by SUN microsystem with a concepts of flip-flops.
           - A flip-flop is a general purpose register which stores one bit of information (one(1)) -> true or zero (0)  -> false)

           Note :- In c or c++ boolean datatype is not available for representing true or false values but a true value can be treated as non-zero and false values can be represented by zero.
           
        Default Value for primitive Data Type :-
        ==============================================
        Datatype            Size
        ==============================================
        byte                0
        short               0
        int                 0
        long                0
        float               0.0
        double              0.0
        char                '\u000'
        boolean             false
    
    Variable in Java :-
    ===================
     - If we enter any input to the program then the input must be stored in the main memory of the computer in terms of variables.
     - Without variables concept one can't represent or store the input of the user in the main memory of the computer. 
     - Variables are also know as building blocks of the programming language.

     Definition :- 
              Variable is an identifier whose value is changing during execution of the program.

    Rules :-
      - When we write some Java applications we may use collection of variables. When we are using variables in Java the Java progammer is highly recommended to use the following rules.
        - The first letter of the variable must be an alphabet.
        - The lenght of the variable in Java can be allowed upto 32 characters.
        - No special symbols are allowed except underscore(_) and $.
        - No special keywords/reserved words are allowed as variable.

    * Variable Declaration :-
      - The process of allocating Sufficient amount of memory space along with a variable name in the main memory of computer is know as variable declaration.
      - Before using any variable in Java that variable must be declared.

        Syntax :- 
                 datatype v1,v2,v3,....vn;
        Here datatype represents either fundamental or derived or user defined datatype.
        v1,v2,....vn represents valid variable names of Java.

        e.g : 
             int a,b,C;
             float f1,f2,f3;
             char c1,c2,c3;
             boolean b1,b2;

      Let us consider the following statement

        int a;

      When the above statement is executed then the system will perform the following actions 

       1. We get suffiecient memory space depends upon data type.
          a is of type integer so it will get 4 bytes of memory allocation.
       2. Whatever memory space is created in above statement the memory space is qualified by variable name a.
       3. Each and every variable in Java must have a distinct or unique address. Address is for system to process the value and variable is for the programmer to access the value.
       4. Memory is one of the essential components, the system will place default values depends on the datatypes. 
        
    * Initialization of variables :-
      - The process of placing programmer defined value within the variable without placing default value is known as initialization of a variable.
      -  Whenever we decided to place predecided values in the variables then we must choose the concept of initialization.

      Syntaxt : 
                datatype v1 = value1, v2 = value2,.....vn = valuen;
            
        - val1, val2,....,valn represents list of predecided values placing in the variables v1,v2,...,vn respectively.
          e.g. 
              float PI = 3.14f;
              int a = 10, b = 20;

        
    * Constants in Java : "final" keyword.
       - If we don't want to change the value of the variable then those variable values must be made as constants.
       - Definition Of Constant : 
                                 A constant is an identifier who's values can't be changed during execution of the program.
       - In Java programming to make anything as constant we use a keyword "final".
       - final is a keyword which is playing an important role in Java at three places they are :
     
      1. final at Variable Level :
          - If we don't want to change the value of the variables then the variable value must be made as final. 
          - In other words if want to make any variable value as a constant then that variable value must be made as final.

          Syntax : -
                     final datatype v1 = val1, v2 = val2,...,vn = valn;

          e.g : 
                     final float PI = 3.14f;
                                 PI = PI + 1; // invalid
                                 
          - once the variable value is final whose value can't be changed.
      
      2. final at Method Level : 
          - We know that each and every operations of our programming languages must be performed with respect to functions/methods.
          - If we don't want to change the definition of the method then the method definition must be made as constant by using final keyword.
          - If anothe words whenever we develop anothe method which is common for many number of Java programmers then such methods are highly recommended to make them as final.

            Syntax :-
                      final returntype methodName (list of final params if any)
                      {
                        //block of statement
                      }

            e.g. :-
                    final float simpleInterest(float p, float t, float r){
                      float = si = p * i * r;
                      return si;
                    }
          - Once the method is final it is not possible to redefine or override.
          
                      
      3. final at Class Level
          - If we don't want to give the features of base class to the derived class, then the base class definition must be made as final.

          Syntax : 
                   final class <class name>{

                   }

          e.g. 
                  final class Personal {

                  }
                  class others extends Personal //invalid
                  {

                  }
          Once the class is final whose properties will not be inherited from base class to derived class.
          Final class is never participated in inheritance process.        
        

    * Object Oriented Programming contains 8 principles they are :
    
    1. Classes
    2. objects
    3. Data Abstraction
    4. Data Encapsulation
    5. Inheritance
    6. Polymorphism
    7. Dynamic Binding
    8. Message Passing

    1. Classes :- 
          - Class concept is always used for developing user/programmer defined datatypes.
          - To develop the class in java we use a keyword "class".
          - Without class concept there is no Java Program.    

        Definition :
             The process of binding the data members and associated methods in Single Unit. This single unit is known as class.
          
            - The data members of the class are also known as attributes or properties.
            - The methods of the class are also know as behviours or accessories or member function.

        - In object oriented programming lang. we have 2 categories of methods :
           1. Member methods :
              A member method is one which is available within the scope of the class and it can access the data of the class.

           2. Non Member methods:
              A non member method is one which is not available within the scope of the class and it can not access the data members of the class.
          
           In Java Programming member method concept is allowed but there is no concept called non-member methods.

           In real world applications the description of the class can be expressed in the form of class diagrams & whose structure is give in the diagram.


           E.g. Define or express a class Student with Suitable data members & methods.

           The above diagram is common for all the object oriented language programmers & whose syntax is differing from one object oriented programming language to other lang.

           Syntax for defining class:
           ==========================
           class <classname>{
              variables or data member declaration;
              methods or function definition;
           }

           Explanation : In the above syntax
                1. class is keyword used for developing user/programmer defined datatype.
                2. <classname> represents a Java valid variable name treated as name of the class. All the class names in Java are treated as user/programmer defined data types.
                3. Whenever we define a class there is no memory space created for data members of the class, when we create object of the class then memory is allocated or created for the data members.
                4. In Java programming we use all the class names for creating objects with respect to the class i.e with respect to a single class definition one can create multiple objects.
                5. Variable declaration represents data members of the class.
                6. Methods definition represents the type of the methods we use to perform some specific operations by making use of data members of the clas.
                7. All the methods of the Java must be defined inside the class only i.e. Java programming never allows to define the methods outside the class and the methods of Java are know as member methods.
                8. The definition of a class may or may not be terminated by semicolon.
                9. Each and every class in Java have logical existance (no memory space is occupied where as every object in Java will have physical existance(Memory Allocated)).

                e.g Define class Student

                class Student{
                  int id;
                  String name;
                  float m1,m2,m3;
                  String collegeName;

                  int getNoHoursStudy(){
                    return n;
                  }

                  String getGrade(){
                    return "Distinction";
                  }

                  float getTotalMarks(){
                    return (m1+m2+m3)
                  }
                } // Student

    2. Objects :
        * Definition of Object :
            1. Instance of a class is known as an object (Instance is nothing but allocating sufficient amount of memory space for the data members of the class.)
            2. Each and every class variable is know as an object.
            3. Grouped item is know as an object (Grouped item is a variable or identities which allows us to store multiple values either of same type or different type or both.)
            4. Value form of class is object.
            5. Blue print of a class is know as an object.
            6. Real world entities are known as object.
            7. Logical runtime entity is known as an object.

        Object Creation :
           When we create an object we get the sufficient memory space for the data members of class.
           Creating an object in Java is nothing but following dynamic memory allocation by making use of "new" operators.
           The "new" operator is known as dynamic memory allocation operator.
           The operator new internally performs two types of operations, those are :
              1. Allocating sufficient amount of memory space for the data members of the class.
                 It takes an address of the class which is loaded in the main memory and places into LHS (Left Hand Side)variable i.e object variable.
                 In java programming to create Object we have two syntaxes.

                 1. <class_name> objectName = new <class_name>

                 e.g. Student so = new Student();

                 2. <class_name> objectName;
                    objectName = new <class_name> 

                  e.g Student so;
                      so = new Student();

                Statement 1 represents object declaration when the object is declared, whose default value is as per the object creatin address.
                Statement 2 represents object referencing, whose default value initially would be null and when the object is referenced, memory space is created for the data members of the class and the object default value is not null.

                  e.g. Student so;   // so is null  student object declaration
                       so = new Student(); // Student object referencing  

Date : 12-09-2022
=================
              
                Q. Define Classloader subsystem.
                -> A class loader subsystem is a program developed by Sunmicro System added as a part of JVM &  it is used for loading .class files from secordary memory to main memory.

                Q. Difference Between Class and Object :
                -> 
                    Class :
                       - The process of binding data members & associated methods in a single unit is know as class.
                       - When we define a class there is no memory space for the data members of the class.
                       - All the classes in Java will have logical existance.
                       - The definition of a particular class will exists only once.
                       - When we execute the Java Program class will be loaded in the main memory. After loading the class in the main memory object creation can be possible.

                    Object :
                       - The class variable is know as object.
                       - When we create an object we get the memory space for data members for the class.
                       - All the obejects in Java will have physical existance.
                       - With respect to one class, one can create multiple objects.
                       - After loading the class in the main memory object creation can be possible.

        * Types of data members : 
                Each & Every Java Program must be written with respect to the class concept. We know that a class is containing data members & methods.
                The data members of the class are classified into two types, they are :
                    1) Instance/non-static data members.
                    2) Class / Static data members.

                1. Instance/Non Static data members :
                     - Instance data members are those whose memory space is creating each and every time whenever an object is created.
                     - If our class is containing collection of data members and we are placing specific values then those data members are recommended to take as instance data members.
                     - Programmatically to make any data member as instance data member whose declaration should not be preceded by a keyword 'static'.
                     - Syntax :
                               datatype v1,v2,...vn;
                     - Each & every instance data member must be accessed with respect to object name.
                         e.g. objname.IDM(Instance Data Member Name)
                     - Instance data members are also known as object level data members because they depends on object and independent from classname.
                     - e.g : int sid, pin;

                2. Static Data Members :
                     - Static data members are those whose memory space is creating only once when the class is loaded in the main memory irrespective of number of obejcts are created.
                     - If our class is containing collection of data members which are containing common values or fixed values then the data members of the class are recommendedto take as static data members.
                     - Programmatically to make any data member as static data members whose declaration must be preceded by a keyword "static".
                     - Syntax :
                                static datatype v1, v2, ....vn;
                     - Each & every static data members must be accessed with respect to class name.
                        e.g :
                             classname.SDM(Static Data Member Name)
                     - The values of static dat members are always sharable.
                     - static data members are also know as class level data members because they depends on class & independent from object name.
                     - e.g : static int sid, pin;

        * Types of Methods In Class :
                A class is containing collection of data members and methods.
                The methods of the class can be divided into two types.

                1) Instance / non-static methods.
                2) static methods
          
              1. Instance / non-static methods :
                     - Instance methods are those which are recommended to perform repeated operations such as reading records from the file, reading records from the database, etc.
                     - Programmatically instance methods definition should not be preceded by a keyword "static".
                     - Syntax :
                               returntype methodname(list of formal parms if any)
                     - Each & every instance method must be accessed with respect to objectName.
                        e.g. objname.instanceMethodName()
                     - The result of instance is not sharable.
                     - Instance methods are know as object level methods because they depends on object & independent from classname.
                       e.g. 
                             void getTotal(){
                              total = m1+m2+m3;
                             }     

              2. Static Methods :
                     - Static methods are those which are recommended to perform one time operations such a opening a file, obtaining the database connection etc.
                     - Programmatically static methods definition must be preceded by a keyword static.
                     - Syntax : 
                               static returnType methodName(list of formal){
                                  //Block of statements;
                               }
                     - All the static methods in Java must be accessed with respect to classname.
                        e.g. classname.staticMethodName
                     - The result of static method are always sharable.
                     - static methods are also known as class level methods because they depends on classname and independent from object.
                     - e.g.
                           public static void main(String [] args){
                             s1.getTotal();
                             s2.getTotal();
                           }

17-09-2022
==========
                    Note : A class can contain instance data members & static data members, instance methods &  static methods.

                    Instance data members & instance methods must be accessed with respect to object name and static data members and static methods must be accessed with respect to class name.

                    System.out.println();
                    System.out.print();

                    The above statements are used for displaying the result of the Java program on the console either by line by line or int the same line.
                    The technical meaning of the above statements is given below.
                     - println() & print() methods are two predefined overloaded instance methods presents in a predefined class called PrintStream.
                     - To access these methods we need an object of PrintStream class but it is not available freely outside.
                     - An object of PrintStream class is called out created in another predefined class called System as a static data member.
                     - Hence println & print method can be accessed as follows.
                               System.out.println();
                               System.out.print();

                     - The following sample code gives the devlopment aspect of the above statements.

                          class System{
                              static PrintStream out = new PrintStream();
                          }

                          class PrintStream{
                            public void println(String){

                            }

                            public void print(int){

                            }
                          }

                      e.g. int a = 10;
                           System.out.println(a); // 10
                           System.out.println("val of a = " +a);
                           Sytem.out.println(a + "is the Value of a");

        * Structure of the Java program :-
                 When we write any program in any programming language it is mandatory for the programmer to follow the standard structure.
                 As a Java programmer to write any Java program, we follow the following standard structure:

                   package details;

                   import statements;
                   
                   class <class_name>{
                      data members;

                      user defined methods

                      public static void main(){
                        Block of statements;
                      }
                   }

        In the above structure :-
        1) Package details represents collection of classes, interfaces & subpackages etc.
           If we use any predefined classes and interfaces as a part of our Java program then it is mandatory to Java programmer to specify in which package those classes & interfaces present.
        2) Each & every Java program must start with concept of class without class name there is no Java program.
        3) Class name represents a Java Valid variable name treated as class name, we know that whenever we define a class, there is no memory space for a data members & methods of the calss. 
           All the class names in Java are defined as user/programmer defined datatypes & they can be used for creating objects.
        4) Data members represents either instance or static & they are selected based on the class.
        5) User defined methods represents either instance or static devloped by the Java programmer to perform specific operation according to the user requirement & these types or methods are know as business logic methods.
        6) Each & every Java program execution starts from main method hence this method is know as program driver.
        7) Since main method is not return any value so that it's return type must be void.
        8) Since main methods execution is only once throughout the life of the entire Java program, the nature of the main method must be staic.

        Since main method can be accessed universally whose access specifier must be public(Universal Access).
        Each & every main method must take array of objects of String class.
        Block of statements represents set of executable statements which interns calls user defined methods.

19-09-2022
==========
          * length :
          =========
                  - Length is one of the implicit variable created automatically by the JVM & supplied to every java program for two purposes.
                    1. To find the number of elements or size of the array.
                    2. To treat the fundametal arrays as objects because Java is one of the pure object oriented programming language.

                    Syntax :-
                    =========
                              Arrayname.Length
                        
                    e.g. 
                         1. int a = {10,20,30};
                          System.out.println("No. of elements = "+a.length);
                         
                         2.String s [] = {"abc","pqr","java"};
                           System.out.println("No. of Names = "+s.length); 

                           for(int i = 0; i< s.length; i++){
                              System.out.prinln(s[i]);
                           }

        * Accessing the data dynamically :
        ==================================
                                          Accessing the data dynamically is nothing but entering the values to the Java program at runtime.
                                          In Java programming to access the values dynamically we have three approaches they are 
                                             1. By using command line arguments.
                                             2. By using keyboard.
                                             3. By using properties file (Resource Bundle).

          1) By using command line arguments:
          ===================================
          Q. Why Java main methods takes array of objects of String class as a parameter?
          => Every main methods types array of objects of String class because to accept command line arguments.
             The number of values which we are passing to the Java program from the command prompt are known as command line arguments.

             e.g : > java SumDemo 60 70

            Here 60 & 70 are command line arguments.
            
          1. When we enter any command line arguments to the Java program they are by default treated as String data.
          2. All the command line arguments are by default passing to main method.
          3. All the command line arguments must be holding main method by taking a String paramerter.
          4. Since command line arguments are unlimited/dynamic, main method is holding all the command line arguments in a array variable in a String Type.
          5. While we are using array variable of String type in the main method one can't specify the size of the array.
          6. Since Java is pure object oriented programming String data which is available in main method must be represented by using a predefined class called.
          7. Therefore every main method must take array of objects of String class for holding command line arguments.

          * Write a Java program to print or to accept command line arguments.

          Note : When we execute the Java program jvm always look for that main method which is taking array of objects of String class but not for other main methods which are taking different types.
20-09-2022
===========
          * Converting String data into fundamental or Numerical data:-
          =============================================================
                          When we pass any command line arguments to the Java program by default the command line arguments are treated as String data. We know that on String data one can't perform numerical manipulations hence it is highly desirable to convert String data into numerical or fundamental data.

                          The following table gives fundamental datatype corresponding wrapper class and conversion method from String data to fundamental data.

                          Datatype     Wrapper Class Name         Conversion method from String to fundamental datatypes
                          ===============================================================================================
                          byte         Byte                       public static byte parseByte(String)  
                          short        Short                      public static short parseShort(String)
                          int          Integer                    public static int parseInt(String)
                          long         Long                       public static long parseLong(String)
                          float        Float                      public static float parseFloat(String)
                          double       Double                     public static double parseDouble(String)
                          boolean      Boolean                    public static boolean parseBoolean(String)
